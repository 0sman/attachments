const xsenv = require('@sap/xsenv')
const cds = require('@sap/cds')

async function scanRequest(Attachments, keys) {
  const credentials = _getCredentials()
  const AttachmentsSrv = await cds.connect.to("attachments")
  await AttachmentsSrv.update(Attachments, keys, { status: "Under Scan" })
  const contentStream = await AttachmentsSrv.get(Attachments, keys)
  let fileContent
  try {
    fileContent = await _streamToString(contentStream)
  } catch (err) {
    await AttachmentsSrv.update(Attachments, keys, { status: "Scan Failed" })
    throw new Error("Cannot read file content", err)
  }

  let response;
  try {
    response = await fetch(`https://${credentials.uri}/scan`, {
      method: "POST",
      headers: {
        Authorization:
          "Basic " + Buffer.from(`${credentials.username}:${credentials.password}`, "binary").toString("base64"),
      },
      body: fileContent,
    })
  } catch (error) {
    throw new Error("Request to malware scanner failed", error)
  }

  try {
    const responseText = await response.json()
    await AttachmentsSrv.update(Attachments, keys, { status: responseText.malwareDetected ? "Malware Detected" : "Clean"})
  } catch (err) {
    await AttachmentsSrv.update(Attachments, keys, { status: "Scan Failed" })
    throw new Error("Cannot serialize malware scanner response body", err)
  }
}

function _getCredentials() {
  return xsenv.serviceCredentials({ label: "malware-scanner" });
}

function _streamToString(stream) {
  const chunks = [];
  return new Promise((resolve, reject) => {
    stream.on('data', (chunk) => chunks.push(Buffer.from(chunk)))
    stream.on('error', (err) => reject(err))
    stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')))
  })
}

module.exports = {
  scanRequest
}